(window.webpackJsonp=window.webpackJsonp||[]).push([[40],{396:function(s,t,a){"use strict";a.r(t);var e=a(42),r=Object(e.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"_06-session-服务器缓存"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_06-session-服务器缓存"}},[s._v("#")]),s._v(" [06] Session / 服务器缓存")]),s._v(" "),a("p",[a("em",[s._v("2021 年 2 月 1 日")])]),s._v(" "),a("hr"),s._v(" "),a("p"),a("div",{staticClass:"table-of-contents"},[a("ul",[a("li",[a("a",{attrs:{href:"#_06-session-服务器缓存"}},[s._v("[06] Session / 服务器缓存")]),a("ul",[a("li",[a("a",{attrs:{href:"#session-有两层含义。"}},[s._v("Session 有两层含义。")])]),a("li",[a("a",{attrs:{href:"#cookie-缓存存在问题"}},[s._v("Cookie 缓存存在问题")])]),a("li",[a("a",{attrs:{href:"#session-会话控制-维基百科"}},[s._v("Session 会话控制（维基百科）")]),a("ul",[a("li",[a("a",{attrs:{href:"#tcp-会话"}},[s._v("TCP 会话")])]),a("li",[a("a",{attrs:{href:"#http-会话"}},[s._v("HTTP 会话")])]),a("li",[a("a",{attrs:{href:"#服务器端的会话"}},[s._v("服务器端的会话")])]),a("li",[a("a",{attrs:{href:"#客户端的会话"}},[s._v("客户端的会话")])]),a("li",[a("a",{attrs:{href:"#服务器端会话和客户端的协作"}},[s._v("服务器端会话和客户端的协作")])])])]),a("li",[a("a",{attrs:{href:"#session-原理"}},[s._v("Session 原理")]),a("ul",[a("li",[a("a",{attrs:{href:"#uid-生成算法方案"}},[s._v("UID 生成算法方案")]),a("ul",[a("li",[a("a",{attrs:{href:"#随机生成-普通查重模式"}},[s._v("随机生成-普通查重模式")])]),a("li",[a("a",{attrs:{href:"#经典表-id-自增"}},[s._v("经典表 ID 自增")])]),a("li",[a("a",{attrs:{href:"#号池模式"}},[s._v("号池模式")])]),a("li",[a("a",{attrs:{href:"#随机生成-查重模式-加位法"}},[s._v("随机生成-查重模式-加位法")])]),a("li",[a("a",{attrs:{href:"#类-snowflake-模式"}},[s._v("类 Snowflake 模式")])]),a("li",[a("a",{attrs:{href:"#uuid-模式"}},[s._v("UUID 模式")])])])])])]),a("li",[a("a",{attrs:{href:"#cookie-和-session-总结"}},[s._v("Cookie 和 Session 总结")]),a("ul",[a("li",[a("a",{attrs:{href:"#cookie"}},[s._v("Cookie")])]),a("li",[a("a",{attrs:{href:"#session"}},[s._v("Session")])])])])])])])]),a("p"),s._v(" "),a("h2",{attrs:{id:"session-有两层含义。"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#session-有两层含义。"}},[s._v("#")]),s._v(" Session 有两层含义。")]),s._v(" "),a("ol",[a("li",[s._v("服务器端会话和客户端的协作的技术：SessionID 配合 Cookie 使用（见本文）。")]),s._v(" "),a("li",[s._v("Session 会话：Session 会话存储——SessionStorage（见 LocalStorage 与 SessionStorage 的使用）。")])]),s._v(" "),a("h2",{attrs:{id:"cookie-缓存存在问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cookie-缓存存在问题"}},[s._v("#")]),s._v(" Cookie 缓存存在问题")]),s._v(" "),a("ul",[a("li",[s._v("Cookie 缓存属于浏览器缓存，Windows 存在 C 盘分配一个小空间给浏览器储存。")]),s._v(" "),a("li",[s._v("浏览器用户通过篡改浏览器 Application—Storage—Cookie 能够获取到其他用户的信息，是不安全的。")]),s._v(" "),a("li",[s._v("而使用 Session 和 Cookie 相互配合，可以解决不安全的问题。")])]),s._v(" "),a("h2",{attrs:{id:"session-会话控制-维基百科"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#session-会话控制-维基百科"}},[s._v("#")]),s._v(" Session 会话控制（维基百科）")]),s._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://zh.wikipedia.org/wiki/%E4%BC%9A%E8%AF%9D_(%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6)",target:"_blank",rel:"noopener noreferrer"}},[s._v("Session 维基百科"),a("OutboundLink")],1)]),s._v(" "),a("li",[s._v("session 是一种持久网络协议，在用户（或用户代理）端和服务器端之间创建关联，从而起到交换数据包的作用机制，session 在网络协议（例如 telnet 或 FTP）中是非常重要的部分。")]),s._v(" "),a("li",[s._v("在不包含会话层（例如 UDP）或者是无法长时间驻留会话层（例如 HTTP）的传输协议中，会话的维持需要依靠在传输数据中的高级别程序。例如，在浏览器和远程主机之间的 HTTP 传输中，HTTP cookie 就会被用来包含一些相关的信息，例如 session ID，参数和权限信息等。")])]),s._v(" "),a("h3",{attrs:{id:"tcp-会话"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tcp-会话"}},[s._v("#")]),s._v(" TCP 会话")]),s._v(" "),a("p",[s._v("通常是通过子进程和（或）多线程在软件中实现的，当计算机创建或者加入一个会话时即创建一个新的进程或线程。")]),s._v(" "),a("h3",{attrs:{id:"http-会话"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#http-会话"}},[s._v("#")]),s._v(" HTTP 会话")]),s._v(" "),a("p",[s._v("通常不会针对每个会话创建一个线程，而是由一个储存每个会话状态信息的数据库实现的。")]),s._v(" "),a("h3",{attrs:{id:"服务器端的会话"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#服务器端的会话"}},[s._v("#")]),s._v(" 服务器端的会话")]),s._v(" "),a("ul",[a("li",[s._v("快速而高效，但在负载均衡系统和高速应用系统中使用较麻烦，而在没有储存能力的系统上更是无法使用。")]),s._v(" "),a("li",[s._v("在负载均衡系统中可以通过共享储存或者设立独立的存储服务器来解决，这需要根据系统的效率和加载分布的需求情况。")]),s._v(" "),a("li",[s._v("使用缓存存储会话数据是一种不需要储存介质的解决方案。")]),s._v(" "),a("li",[s._v("这种方式适合于处理少量数据的客户端操作（例如路由或网络桥接器对多个客户端产生的请求）。")]),s._v(" "),a("li",[s._v("但是这种方式会消耗较多内存空间。")])]),s._v(" "),a("h3",{attrs:{id:"客户端的会话"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#客户端的会话"}},[s._v("#")]),s._v(" 客户端的会话")]),s._v(" "),a("p",[s._v("客户端会话使用了 Cookie 和加密技术来完成上面提到的数据储存需求。")]),s._v(" "),a("h3",{attrs:{id:"服务器端会话和客户端的协作"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#服务器端会话和客户端的协作"}},[s._v("#")]),s._v(" 服务器端会话和客户端的协作")]),s._v(" "),a("ul",[a("li",[s._v("在动态页面完成解析的时候，储存在会话中的变量会被压缩后传输给客户端的 Cookie。此时完全依靠客户端的文件系统来保存这些数据（或者内存）。")]),s._v(" "),a("li",[s._v("在每一个成功的请求中，Cookie 中都保存有服务器端用户所具有的身份证明（PHP 中的 session id）或者更为完整的数据。")]),s._v(" "),a("li",[s._v("虽然这样的机制可以保存数据的前后关联，但是必须要保障数据的完整性和安全性。")])]),s._v(" "),a("h2",{attrs:{id:"session-原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#session-原理"}},[s._v("#")]),s._v(" Session 原理")]),s._v(" "),a("ul",[a("li",[s._v("服务器端声明一个 hash 给用户名 ID 一个命名空间。")]),s._v(" "),a("li",[s._v("每个用户名 ID 对应一个随机数/或某种加密手段处理过的一串字符串。")])]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" Sessions "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" Math"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("radom")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("100000")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\nSessions"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("XXXID")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("ul",[a("li",[s._v("这样通过一串随机数或加密字符串的 Cookie，在服务器通过该 hash 拿到用户名，在通过用户名在数据库中拿到用户数据，起到安全作用。")]),s._v(" "),a("li",[s._v("Sessions 相当于服务端的一个内存空间，而 Cookie 则为浏览器客户端硬盘的一个内存空间，两者可以相互配合使用。")]),s._v(" "),a("li",[s._v("随机数已经起到了安全性的作用，但是还是有很小的机率会出现重复，这时候可以考虑混入时间戳/用户 IP 等使得这串字符串更具有唯一性。")])]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 取到当下时间（秒）")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Date")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("getTime")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("h3",{attrs:{id:"uid-生成算法方案"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#uid-生成算法方案"}},[s._v("#")]),s._v(" UID 生成算法方案")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("ID 是一个系统内用户的唯一标识，其特性: 唯一性、可公开广播、存在可能价值等。")])]),s._v(" "),a("li",[a("p",[s._v("流行的生成方式：摘自"),a("a",{attrs:{href:"https://segmentfault.com/a/1190000023588832",target:"_blank",rel:"noopener noreferrer"}},[s._v("用户 UID 的几种生成方案及优缺点——网友 boywus"),a("OutboundLink")],1)]),s._v(" "),a("ul",[a("li",[s._v("随机生成-普通查重模式")]),s._v(" "),a("li",[s._v("经典表 ID 自增模式")]),s._v(" "),a("li",[s._v("号池模式")]),s._v(" "),a("li",[s._v("随机生成-查重模式-加位法")]),s._v(" "),a("li",[s._v("类 Snowflake 模式")]),s._v(" "),a("li",[s._v("UUID 模式")])])])]),s._v(" "),a("h4",{attrs:{id:"随机生成-普通查重模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#随机生成-普通查重模式"}},[s._v("#")]),s._v(" 随机生成-普通查重模式")]),s._v(" "),a("p",[s._v("使用 rand 函数随机成生，再去 user 表上查重，不重复就作为用户的 UID，重复则继续 rand 到不重复为止。")]),s._v(" "),a("ul",[a("li",[s._v("优点: 生成速度快、逻辑简单、生成号段格式可以通过过滤器控制。")]),s._v(" "),a("li",[s._v("缺点: 当用户总数变高的时候，重复率会变高。")]),s._v(" "),a("li",[s._v("适用: 用户总量不会很高，对于靓号没有什么要求。")])]),s._v(" "),a("h4",{attrs:{id:"经典表-id-自增"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#经典表-id-自增"}},[s._v("#")]),s._v(" 经典表 ID 自增")]),s._v(" "),a("p",[s._v("将 user 表的 id 设置为 auto_increment，插入会自动生成 ID，将表的主键 ID 作为 UID。")]),s._v(" "),a("ul",[a("li",[s._v("优点: 不需要主动管理，自动生成，不会重复。")]),s._v(" "),a("li",[s._v("缺点: 容易暴露系统的真实用户数，不适合需要良好数据的商业公司。")]),s._v(" "),a("li",[s._v("适用: 普通的社区、博客内容等不关注 UID 模式的系统。")])]),s._v(" "),a("h4",{attrs:{id:"号池模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#号池模式"}},[s._v("#")]),s._v(" 号池模式")]),s._v(" "),a("p",[s._v("生成一批 UID 存放到号池内， 注册一个取走一个。")]),s._v(" "),a("ul",[a("li",[s._v("优点: 对于靓号的控制精准、号池控制得当的话，不会发生重复。")]),s._v(" "),a("li",[s._v("缺点: 对于号池服务的稳定性很高, 对于号池内数据的增加和删除需要主动管理，否则会发生重复。")]),s._v(" "),a("li",[s._v("适用: 对靓号要求控制严格，适用于一般的等级荣誉感、靓号荣誉感较高的玩家社区。")])]),s._v(" "),a("h4",{attrs:{id:"随机生成-查重模式-加位法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#随机生成-查重模式-加位法"}},[s._v("#")]),s._v(" 随机生成-查重模式-加位法")]),s._v(" "),a("p",[s._v("加位查重法是普通查重法的升级，当碰到了重复号码的时候，向号码尾部增加一个随机数字，如果重复就继续增加，直到不重复为止。")]),s._v(" "),a("ul",[a("li",[s._v("优点: 相对于普通查重法，重复后的再次获取次数可以减少")]),s._v(" "),a("li",[s._v("缺点: 重复后再获取率随着用户数上升，也会遭遇瓶颈。")]),s._v(" "),a("li",[s._v("适用: 同普通查重模式。")])]),s._v(" "),a("h4",{attrs:{id:"类-snowflake-模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#类-snowflake-模式"}},[s._v("#")]),s._v(" 类 Snowflake 模式")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("Snowflake 是一个经典的号段生成算法，同时市面上存在大量的 XXXflake 算法，一般用作订单号。")])]),s._v(" "),a("li",[a("p",[s._v("Snowflake 的原理：使用 41bit 作为毫秒数，10bit 作为机器的 ID（5 个 bit 是数据中心，5 个 bit 的机器 ID），12bit 作为毫秒内的流水号，最后还有一个符号位，永远是 0。")]),s._v(" "),a("ul",[a("li",[s._v("优点: 不需要主动管理就可保证防重性，可以根据业务配比调整 bit。")]),s._v(" "),a("li",[s._v("缺点: 生成的数据结果比较长，索引需要主动优化。")]),s._v(" "),a("li",[s._v("适用: 不存在 UID 靓号需求")])])])]),s._v(" "),a("h4",{attrs:{id:"uuid-模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#uuid-模式"}},[s._v("#")]),s._v(" UUID 模式")]),s._v(" "),a("p",[s._v("UUID 是一个国际标准算法，优缺点和类 Snowflake 一致")]),s._v(" "),a("ul",[a("li",[s._v("优点: 不需要主动管理就可保证防重性。")]),s._v(" "),a("li",[s._v("缺点: 生成的数据结果比较长，索引需要主动优化。")]),s._v(" "),a("li",[s._v("适用: 不存在 UID 靓号需求")])]),s._v(" "),a("h2",{attrs:{id:"cookie-和-session-总结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cookie-和-session-总结"}},[s._v("#")]),s._v(" Cookie 和 Session 总结")]),s._v(" "),a("h3",{attrs:{id:"cookie"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cookie"}},[s._v("#")]),s._v(" Cookie")]),s._v(" "),a("ol",[a("li",[s._v("服务器通过 Set-Cookie 头给客户端一串字符串")]),s._v(" "),a("li",[s._v("客户端每次访问相同域名的网页时，必须带上这段字符串")]),s._v(" "),a("li",[s._v("客户端要在一段时间内保存这个 Cookie")]),s._v(" "),a("li",[s._v("Cookie 默认在用户关闭页面后就失效，后台代码可以任意设置 Cookie 的过期时间")]),s._v(" "),a("li",[s._v("大小大概在 4kb 以内")])]),s._v(" "),a("h3",{attrs:{id:"session"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#session"}},[s._v("#")]),s._v(" Session")]),s._v(" "),a("ol",[a("li",[s._v("将 SessionID（随机数）通过 Cookie 发给客户端")]),s._v(" "),a("li",[s._v("客户端访问服务器时，服务器读取 SessionID")]),s._v(" "),a("li",[s._v("服务器有一块内存（哈希表）保存了所有 session")]),s._v(" "),a("li",[s._v("通过 SessionID 我们可以得到对应用户的隐私信息，如 id、email")]),s._v(" "),a("li",[s._v("这块内存（哈希表）就是服务器上的所有 session")])]),s._v(" "),a("hr"),s._v(" "),a("p",[a("em",[s._v("Copyright © 2020 - 2021 by 叶旭瑶 . All Rights Reserved .")])])])}),[],!1,null,null,null);t.default=r.exports}}]);